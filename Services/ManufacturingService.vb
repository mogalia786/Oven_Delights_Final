Imports System.Data
Imports Microsoft.Data.SqlClient
Imports System.Configuration

Public Class ManufacturingService
    Private ReadOnly _cs As String
    Private ReadOnly stockroomService As New StockroomService()

    Public Sub New()
        _cs = ConfigurationManager.ConnectionStrings("OvenDelightsERPConnectionString").ConnectionString
    End Sub

    ' Receives finished goods directly into MFG ProductInventory (no MO).
    Public Sub ReceiveFinishedToMFG(
        productId As Integer,
        quantity As Decimal,
        Optional branchId As Integer? = Nothing,
        Optional userId As Integer? = Nothing,
        Optional toLocationCode As String = "MFG"
    )
        If quantity <= 0D Then Throw New ArgumentException("quantity must be > 0")
        Using cn As New SqlConnection(_cs)
            cn.Open()
            Using cmd As New SqlCommand("dbo.sp_FG_ReceiveToMFG", cn)
                cmd.CommandType = CommandType.StoredProcedure
                cmd.Parameters.AddWithValue("@ProductID", productId)
                cmd.Parameters.AddWithValue("@Quantity", quantity)
                Dim bid As Integer = If(branchId.HasValue AndAlso branchId.Value > 0, branchId.Value, stockroomService.GetCurrentUserBranchId())
                Dim pBranch As New SqlParameter("@BranchID", SqlDbType.Int)
                pBranch.Value = If(bid > 0, CType(bid, Object), DBNull.Value)
                cmd.Parameters.Add(pBranch)
                Dim uid As Integer = If(userId.HasValue AndAlso userId.Value > 0, userId.Value, stockroomService.GetCurrentUserBranchId())
                Dim pUser As New SqlParameter("@UserID", SqlDbType.Int)
                pUser.Value = If(uid > 0, CType(uid, Object), DBNull.Value)
                cmd.Parameters.Add(pUser)
                cmd.Parameters.AddWithValue("@ToLocationCode", If(toLocationCode, String.Empty))
                cmd.ExecuteNonQuery()
            End Using
        End Using
    End Sub

    ' Issues raw material or component to a Manufacturing Order.
    ' Returns the StockMovements Out movement ID generated by the proc.
    Public Function IssueMaterial(
        moId As Integer,
        componentType As String,         ' RawMaterial | SemiFinished | NonStock
        Optional rawMaterialId As Integer? = Nothing,
        Optional componentProductId As Integer? = Nothing,
        Optional quantity As Decimal = 0D,
        Optional uom As String = "",
        Optional fromLocationCode As String = "STOCKROOM",
        Optional toLocationCode As String = "MFG",
        Optional branchId As Integer? = Nothing,
        Optional userId As Integer? = Nothing
    ) As Integer
        If quantity <= 0D Then Throw New ArgumentException("Quantity must be > 0")
        If String.IsNullOrWhiteSpace(componentType) Then Throw New ArgumentException("componentType is required")
        Dim outMovementId As Integer = 0
        Using cn As New SqlConnection(_cs)
            cn.Open()
            Using cmd As New SqlCommand("dbo.sp_MO_IssueMaterial", cn)
                cmd.CommandType = CommandType.StoredProcedure
                cmd.Parameters.AddWithValue("@MOID", moId)
                cmd.Parameters.AddWithValue("@ComponentType", componentType)
                Dim pRaw As New SqlParameter("@RawMaterialID", SqlDbType.Int)
                pRaw.Value = If(rawMaterialId.HasValue, CType(rawMaterialId.Value, Object), DBNull.Value)
                cmd.Parameters.Add(pRaw)
                Dim pComp As New SqlParameter("@ComponentProductID", SqlDbType.Int)
                pComp.Value = If(componentProductId.HasValue, CType(componentProductId.Value, Object), DBNull.Value)
                cmd.Parameters.Add(pComp)
                cmd.Parameters.AddWithValue("@Quantity", quantity)
                cmd.Parameters.AddWithValue("@UoM", If(uom, String.Empty))
                cmd.Parameters.AddWithValue("@FromLocationCode", If(fromLocationCode, String.Empty))
                cmd.Parameters.AddWithValue("@ToLocationCode", If(toLocationCode, String.Empty))
                Dim bid As Integer = If(branchId.HasValue AndAlso branchId.Value > 0, branchId.Value, stockroomService.GetCurrentUserBranchId())
                Dim pBranch As New SqlParameter("@BranchID", SqlDbType.Int)
                pBranch.Value = If(bid > 0, CType(bid, Object), DBNull.Value)
                cmd.Parameters.Add(pBranch)
                Dim uid As Integer = If(userId.HasValue AndAlso userId.Value > 0, userId.Value, stockroomService.GetCurrentUserBranchId())
                Dim pUser As New SqlParameter("@UserID", SqlDbType.Int)
                pUser.Value = If(uid > 0, CType(uid, Object), DBNull.Value)
                cmd.Parameters.Add(pUser)
                Dim pOut As New SqlParameter("@OutMovementID", SqlDbType.Int)
                pOut.Direction = ParameterDirection.Output
                cmd.Parameters.Add(pOut)
                cmd.ExecuteNonQuery()
                If pOut.Value IsNot Nothing AndAlso pOut.Value IsNot DBNull.Value Then outMovementId = Convert.ToInt32(pOut.Value)
            End Using
        End Using
        Return outMovementId
    End Function

    ' Receives MO output into finished goods inventory. Returns MOOutputs line ID.
    Public Function ReceiveOutput(
        moId As Integer,
        quantityMade As Decimal,
        uom As String,
        Optional toLocationCode As String = "MFG",
        Optional branchId As Integer? = Nothing,
        Optional userId As Integer? = Nothing
    ) As Integer
        If quantityMade <= 0D Then Throw New ArgumentException("quantityMade must be > 0")
        Dim outputLineId As Integer = 0
        Using cn As New SqlConnection(_cs)
            cn.Open()
            Using cmd As New SqlCommand("dbo.sp_MO_ReceiveOutput", cn)
                cmd.CommandType = CommandType.StoredProcedure
                cmd.Parameters.AddWithValue("@MOID", moId)
                cmd.Parameters.AddWithValue("@QuantityMade", quantityMade)
                cmd.Parameters.AddWithValue("@UoM", If(uom, String.Empty))
                cmd.Parameters.AddWithValue("@ToLocationCode", If(toLocationCode, String.Empty))
                Dim bid As Integer = If(branchId.HasValue AndAlso branchId.Value > 0, branchId.Value, stockroomService.GetCurrentUserBranchId())
                Dim pBranch As New SqlParameter("@BranchID", SqlDbType.Int)
                pBranch.Value = If(bid > 0, CType(bid, Object), DBNull.Value)
                cmd.Parameters.Add(pBranch)
                Dim uid As Integer = If(userId.HasValue AndAlso userId.Value > 0, userId.Value, stockroomService.GetCurrentUserBranchId())
                Dim pUser As New SqlParameter("@UserID", SqlDbType.Int)
                pUser.Value = If(uid > 0, CType(uid, Object), DBNull.Value)
                cmd.Parameters.Add(pUser)
                Dim pOut As New SqlParameter("@OutputLineID", SqlDbType.Int)
                pOut.Direction = ParameterDirection.Output
                cmd.Parameters.Add(pOut)
                cmd.ExecuteNonQuery()
                If pOut.Value IsNot Nothing AndAlso pOut.Value IsNot DBNull.Value Then outputLineId = Convert.ToInt32(pOut.Value)
            End Using
        End Using
        Return outputLineId
    End Function

    ' Transfers finished goods from MFG to RETAIL locations (branch-aware).
    Public Sub TransferToRetail(
        productId As Integer,
        quantity As Decimal,
        Optional branchId As Integer? = Nothing,
        Optional userId As Integer? = Nothing,
        Optional fromLocationCode As String = "MFG",
        Optional toLocationCode As String = "RETAIL"
    )
        If quantity <= 0D Then Throw New ArgumentException("quantity must be > 0")
        Using cn As New SqlConnection(_cs)
            cn.Open()
            Using cmd As New SqlCommand("dbo.sp_FG_TransferToRetail", cn)
                cmd.CommandType = CommandType.StoredProcedure
                cmd.Parameters.AddWithValue("@ProductID", productId)
                cmd.Parameters.AddWithValue("@Quantity", quantity)
                Dim bid As Integer = If(branchId.HasValue AndAlso branchId.Value > 0, branchId.Value, stockroomService.GetCurrentUserBranchId())
                Dim pBranch As New SqlParameter("@BranchID", SqlDbType.Int)
                pBranch.Value = If(bid > 0, CType(bid, Object), DBNull.Value)
                cmd.Parameters.Add(pBranch)
                Dim uid As Integer = If(userId.HasValue AndAlso userId.Value > 0, userId.Value, stockroomService.GetCurrentUserBranchId())
                Dim pUser As New SqlParameter("@UserID", SqlDbType.Int)
                pUser.Value = If(uid > 0, CType(uid, Object), DBNull.Value)
                cmd.Parameters.Add(pUser)
                cmd.Parameters.AddWithValue("@FromLocationCode", If(fromLocationCode, String.Empty))
                cmd.Parameters.AddWithValue("@ToLocationCode", If(toLocationCode, String.Empty))
                cmd.ExecuteNonQuery()
            End Using
            
            ' Sync to Retail_Stock for POS system
            Try
                Dim bid As Integer = If(branchId.HasValue AndAlso branchId.Value > 0, branchId.Value, stockroomService.GetCurrentUserBranchId())
                Using cmdSync As New SqlCommand("dbo.sp_Sync_ProductInventory_To_RetailStock", cn)
                    cmdSync.CommandType = CommandType.StoredProcedure
                    cmdSync.Parameters.AddWithValue("@ProductID", productId)
                    cmdSync.Parameters.AddWithValue("@BranchID", If(bid > 0, CType(bid, Object), DBNull.Value))
                    cmdSync.Parameters.AddWithValue("@Quantity", quantity)
                    cmdSync.Parameters.AddWithValue("@UnitCost", 0)
                    cmdSync.ExecuteNonQuery()
                End Using
            Catch ex As Exception
                ' Log but don't fail if sync procedure doesn't exist yet
                System.Diagnostics.Debug.WriteLine($"Retail_Stock sync skipped: {ex.Message}")
            End Try
        End Using
    End Sub

    ' Issues all BOM components required for an MO in one operation and returns a summary table.
    Public Function IssueFromBOM(
        moId As Integer,
        outputQty As Decimal,
        Optional branchId As Integer? = Nothing,
        Optional userId As Integer? = Nothing,
        Optional fromLocationCode As String = "STOCKROOM",
        Optional toLocationCode As String = "MFG"
    ) As DataTable
        If outputQty <= 0D Then Throw New ArgumentException("outputQty must be > 0")
        Dim dt As New DataTable()
        Using cn As New SqlConnection(_cs)
            cn.Open()
            Using cmd As New SqlCommand("dbo.sp_MO_IssueFromBOM", cn)
                cmd.CommandType = CommandType.StoredProcedure
                cmd.Parameters.AddWithValue("@MOID", moId)
                cmd.Parameters.AddWithValue("@OutputQty", outputQty)
                Dim bid As Integer = If(branchId.HasValue AndAlso branchId.Value > 0, branchId.Value, stockroomService.GetCurrentUserBranchId())
                Dim pBranch As New SqlParameter("@BranchID", SqlDbType.Int)
                pBranch.Value = If(bid > 0, CType(bid, Object), DBNull.Value)
                cmd.Parameters.Add(pBranch)
                Dim uid As Integer = If(userId.HasValue AndAlso userId.Value > 0, userId.Value, stockroomService.GetCurrentUserBranchId())
                Dim pUser As New SqlParameter("@UserID", SqlDbType.Int)
                pUser.Value = If(uid > 0, CType(uid, Object), DBNull.Value)
                cmd.Parameters.Add(pUser)
                cmd.Parameters.AddWithValue("@FromLocationCode", If(fromLocationCode, String.Empty))
                cmd.Parameters.AddWithValue("@ToLocationCode", If(toLocationCode, String.Empty))

                Using da As New SqlDataAdapter(cmd)
                    da.Fill(dt)
                End Using
            End Using
        End Using
        Return dt
    End Function

    ' Ensures there is an active BOM for the given product. If none exists, creates one from RecipeNode.
    ' Returns the active BOMID.
    Public Function EnsureActiveBOMFromRecipe(productId As Integer) As Integer
        If productId <= 0 Then Throw New ArgumentException("productId must be > 0")
        Dim bomId As Integer = 0
        Using cn As New SqlConnection(_cs)
            cn.Open()
            Using tx = cn.BeginTransaction()
                Try
                    ' Check for existing active BOM
                    Using cmdFind As New SqlCommand("SELECT TOP 1 BOMID FROM dbo.BOMHeader WHERE ProductID=@pid AND IsActive=1 AND EffectiveFrom <= CAST(GETDATE() AS DATE) AND (EffectiveTo IS NULL OR EffectiveTo >= CAST(GETDATE() AS DATE)) ORDER BY VersionNo DESC, BOMID DESC", cn, tx)
                        cmdFind.Parameters.AddWithValue("@pid", productId)
                        Dim obj = cmdFind.ExecuteScalar()
                        If obj IsNot Nothing AndAlso obj IsNot DBNull.Value Then
                            bomId = Convert.ToInt32(obj)
                            tx.Commit()
                            Return bomId
                        End If
                    End Using

                    ' Create header with batch yield = 1 and YieldUoM = product BaseUoM (fallback 'ea')
                    Dim yieldUom As String = "ea"
                    Using cmdU As New SqlCommand("SELECT TOP 1 ISNULL(BaseUoM,'ea') FROM dbo.Products WHERE ProductID=@pid", cn, tx)
                        cmdU.Parameters.AddWithValue("@pid", productId)
                        Dim u = cmdU.ExecuteScalar()
                        If u IsNot Nothing AndAlso u IsNot DBNull.Value Then yieldUom = u.ToString()
                    End Using

                    Using cmdInsH As New SqlCommand("INSERT INTO dbo.BOMHeader (ProductID, VersionNo, BatchYieldQty, YieldUoM, EffectiveFrom, IsActive) VALUES (@pid, 1, 1, @uom, CAST(GETDATE() AS DATE), 1); SELECT SCOPE_IDENTITY();", cn, tx)
                        cmdInsH.Parameters.AddWithValue("@pid", productId)
                        cmdInsH.Parameters.AddWithValue("@uom", yieldUom)
                        Dim objH = cmdInsH.ExecuteScalar()
                        bomId = Convert.ToInt32(objH)
                    End Using

                    ' Insert items from RecipeNode: exclude root node, avoid CROSS APPLY, use LineNumber consistently
                    Dim sqlItems As String = ""
                    sqlItems &= "WITH R AS (" &
                                "  SELECT rn.*, " &
                                "         ROW_NUMBER() OVER (ORDER BY rn.SortOrder, rn.NodeID) AS LineNumber, " &
                                "         ISNULL(u.UoMCode, pr.BaseUoM) AS UoMCode " &
                                "  FROM dbo.RecipeNode rn " &
                                "  LEFT JOIN dbo.UoM u ON u.UoMID = rn.UoMID " &
                                "  INNER JOIN dbo.Products pr ON pr.ProductID = rn.ProductID " &
                                "  WHERE rn.ProductID = @pid AND rn.ItemType IS NOT NULL AND rn.ParentNodeID IS NOT NULL" &
                                ") " &
                                "INSERT INTO dbo.BOMItems (BOMID, LineNumber, ComponentType, RawMaterialID, ComponentProductID, NonStockDesc, QuantityPerBatch, UoM) " &
                                "SELECT @bomId, R.LineNumber, " &
                                "       CASE WHEN R.ItemType='SubAssembly' AND R.SubAssemblyProductID IS NOT NULL THEN 'SemiFinished' " &
                                "            WHEN R.MaterialID IS NOT NULL THEN 'RawMaterial' ELSE 'NonStock' END AS ComponentType, " &
                                "       CASE WHEN R.MaterialID IS NOT NULL THEN R.MaterialID ELSE NULL END AS RawMaterialID, " &
                                "       CASE WHEN R.ItemType='SubAssembly' AND R.SubAssemblyProductID IS NOT NULL THEN R.SubAssemblyProductID ELSE NULL END AS ComponentProductID, " &
                                "       CASE WHEN (R.ItemType<>'SubAssembly' OR R.SubAssemblyProductID IS NULL) AND R.MaterialID IS NULL THEN ISNULL(R.ItemName,'Component') ELSE NULL END AS NonStockDesc, " &
                                "       ISNULL(R.Qty,0), R.UoMCode " &
                                "FROM R;"

                    Using cmdItems As New SqlCommand(sqlItems, cn, tx)
                        cmdItems.Parameters.AddWithValue("@pid", productId)
                        cmdItems.Parameters.AddWithValue("@bomId", bomId)
                        cmdItems.ExecuteNonQuery()
                    End Using

                    tx.Commit()
                Catch ex As Exception
                    Try
                        tx.Rollback()
                    Catch
                    End Try
                    Throw
                End Try
            End Using
        End Using
        Return bomId
    End Function

    ' Creates an Internal Order (bundle) from one or more BOMs (aggregated) using TVP dbo.BOMRequestItem.
    ' items: List of Tuple(ProductID, OutputQty)
    ' Returns: DataSet with two tables: [0]=Header, [1]=Lines
    Public Function CreateBundleFromBOM(
        items As List(Of Tuple(Of Integer, Decimal)),
        Optional branchId As Integer? = Nothing,
        Optional userId As Integer? = Nothing,
        Optional fromLocationCode As String = "STOCKROOM",
        Optional toLocationCode As String = "MFG"
    ) As DataSet
        If items Is Nothing OrElse items.Count = 0 Then Throw New ArgumentException("At least one item is required")

        ' Build TVP matching dbo.BOMRequestItem (ProductID INT, OutputQty DECIMAL(18,4))
        Dim tvp As New DataTable()
        tvp.Columns.Add("ProductID", GetType(Integer))
        tvp.Columns.Add("OutputQty", GetType(Decimal))
        For Each t In items
            Dim row = tvp.NewRow()
            row("ProductID") = t.Item1
            row("OutputQty") = Decimal.Round(t.Item2, 4)
            tvp.Rows.Add(row)
        Next

        ' Auto-assign producer if not provided and a single product reorder: use last finisher for that product
        Dim resolvedUserId As Integer = 0
        If userId.HasValue AndAlso userId.Value > 0 Then
            resolvedUserId = userId.Value
        ElseIf items.Count = 1 Then
            Dim pid As Integer = items(0).Item1
            Dim bidLookup As Integer = If(branchId.HasValue AndAlso branchId.Value > 0, branchId.Value, stockroomService.GetCurrentUserBranchId())
            resolvedUserId = LookupLastFinisherUserId(pid, bidLookup)
        End If

        Dim ds As New DataSet()
        Using cn As New SqlConnection(_cs)
            cn.Open()
            Using cmd As New SqlCommand("dbo.sp_MO_CreateBundleFromBOM", cn)
                cmd.CommandType = CommandType.StoredProcedure
                Dim pItems As New SqlParameter("@Items", SqlDbType.Structured)
                pItems.TypeName = "dbo.BOMRequestItem"
                pItems.Value = tvp
                cmd.Parameters.Add(pItems)

                Dim bid As Integer = If(branchId.HasValue AndAlso branchId.Value > 0, branchId.Value, stockroomService.GetCurrentUserBranchId())
                Dim pBranch As New SqlParameter("@BranchID", SqlDbType.Int)
                pBranch.Value = If(bid > 0, CType(bid, Object), DBNull.Value)
                cmd.Parameters.Add(pBranch)

                Dim uid As Integer = If(resolvedUserId > 0, resolvedUserId, stockroomService.GetCurrentUserBranchId())
                Dim pUser As New SqlParameter("@UserID", SqlDbType.Int)
                pUser.Value = If(uid > 0, CType(uid, Object), DBNull.Value)
                cmd.Parameters.Add(pUser)

                cmd.Parameters.AddWithValue("@FromLocationCode", If(fromLocationCode, String.Empty))
                cmd.Parameters.AddWithValue("@ToLocationCode", If(toLocationCode, String.Empty))

                Using da As New SqlDataAdapter(cmd)
                    da.Fill(ds)
                End Using
            End Using
        End Using
        Return ds
    End Function

    ' Looks up the most recent Completed Internal Order containing the given product in its Notes list and returns RequestedBy as last finisher.
    ' Falls back to 0 if none found.
    Private Function LookupLastFinisherUserId(productId As Integer, Optional branchId As Integer = 0) As Integer
        If productId <= 0 Then Return 0
        Dim uid As Integer = 0
        Using cn As New SqlConnection(_cs)
            cn.Open()
            Dim sql As String = "SELECT TOP 1 IOH.RequestedBy " & _
                                "FROM dbo.InternalOrderHeader IOH " & _
                                "WHERE IOH.Status='Completed' AND IOH.Notes LIKE 'Products:%' AND IOH.Notes LIKE @tag " & _
                                If(branchId > 0, " AND IOH.BranchID=@b ", "") & _
                                "ORDER BY IOH.RequestedDate DESC, IOH.InternalOrderID DESC"
            Using cmd As New SqlCommand(sql, cn)
                cmd.Parameters.AddWithValue("@tag", "%" & productId.ToString() & "=%")
                If branchId > 0 Then cmd.Parameters.AddWithValue("@b", branchId)
                Dim o = cmd.ExecuteScalar()
                If o IsNot Nothing AndAlso o IsNot DBNull.Value Then
                    uid = Convert.ToInt32(o)
                End If
            End Using
        End Using
        Return uid
    End Function

    ' Fulfills an Internal Order bundle to MFG and returns a fulfillment summary.
    Public Function FulfillBundleToMFG(
        internalOrderId As Integer,
        Optional branchId As Integer? = Nothing,
        Optional userId As Integer? = Nothing
    ) As DataTable
        Dim dt As New DataTable()
        Using cn As New SqlConnection(_cs)
            cn.Open()
            Using cmd As New SqlCommand("dbo.sp_IO_FulfillToMFG", cn)
                cmd.CommandType = CommandType.StoredProcedure
                cmd.Parameters.AddWithValue("@InternalOrderID", internalOrderId)
                Dim bid As Integer = If(branchId.HasValue AndAlso branchId.Value > 0, branchId.Value, stockroomService.GetCurrentUserBranchId())
                Dim pBranch As New SqlParameter("@BranchID", SqlDbType.Int)
                pBranch.Value = If(bid > 0, CType(bid, Object), DBNull.Value)
                cmd.Parameters.Add(pBranch)
                Dim uid As Integer = If(userId.HasValue AndAlso userId.Value > 0, userId.Value, stockroomService.GetCurrentUserBranchId())
                Dim pUser As New SqlParameter("@UserID", SqlDbType.Int)
                pUser.Value = If(uid > 0, CType(uid, Object), DBNull.Value)
                cmd.Parameters.Add(pUser)

                Using da As New SqlDataAdapter(cmd)
                    da.Fill(dt)
                End Using
            End Using
        End Using
        Return dt
    End Function

End Class
